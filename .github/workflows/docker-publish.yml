name: Docker build and publish

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]

permissions:
  contents: read
  packages: write

concurrency:
  group: docker-publish-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Generate image name
        id: image
        shell: bash
        run: |
          IMAGE="${{ env.REGISTRY }}/$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: Install jq
        shell: bash
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Get version
        id: vars
        shell: bash
        run: |
          VERSION=$(jq -r .version package.json)
          if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
            echo "Could not read .version from package.json" >&2
            exit 1
          fi

          SHORT_SHA=$(git rev-parse --short HEAD)

          TAGS="${{ steps.image.outputs.image }}:${VERSION}"
          # Add latest for main branch
          if [[ "${GITHUB_REF_TYPE}" == "branch" && "${GITHUB_REF_NAME}" == "main" ]]; then
            TAGS+=" , ${{ steps.image.outputs.image }}:latest"
          fi
          # Add short SHA tag for traceability
          TAGS+=" , ${{ steps.image.outputs.image }}:${SHORT_SHA}"

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          # docker/build-push-action accepts a comma or newline-separated list
          echo "tags=$TAGS" >> "$GITHUB_OUTPUT"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.vars.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.vars.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
